# -*- coding: utf-8 -*-
"""regression model_FINAL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12jp6Tmq5qT4OjJ0WoXbXQOGFXzIg5-j4
"""

"""
Here‚Äôs a compact breakdown in **keyword + equation** style:

---

### üì• **File I/O**

* Inputs:

  * `subject4_recovery_resp.csv` ‚Üí **Respiratory data**
  * `Subject4_recovery_polar.CSV` ‚Üí **Polar H10 ECG data**
* Output:

  * Folder: `OUTPUT/recovery/subject5/`
  * Excel + plot file

---

### üîß **Data Preprocessing**

* ‚è± `Time` columns ‚Üí converted to **float** or **seconds**
* Clean headers: `.strip()` to remove whitespace

---

### üí° **Heart Rate Estimation**

* Averaged Breathing Rate:

  $$
  \text{BR}_{\text{avg}} = \frac{\text{BR}_1 + \text{BR}_2}{2}
  $$
* **Form Factor:**

  $$
  \text{Estimated HR} = \text{BR}_{\text{avg}} \times 5.6
  $$

  * `form factor = 5.6`, `bias factor = 0`

---

### ‚è≥ **Time Alignment**

* `common_time`:

  $$
  \text{linspace}(\max(t_{\text{resp start}}, t_{\text{polar start}}),\; \min(t_{\text{resp end}}, t_{\text{polar end}}),\; 500)
  $$
* `np.interp(...)` for both signals

---

### üìä **Performance Metrics**

* Root Mean Square Error (RMSE):

  $$
  \text{RMSE} = \sqrt{\frac{1}{n} \sum (y_{\text{true}} - y_{\text{pred}})^2}
  $$
* Mean Absolute Error (MAE):

  $$
  \text{MAE} = \frac{1}{n} \sum |y_{\text{true}} - y_{\text{pred}}|
  $$
* Bias:

  $$
  \text{Bias} = \text{mean}(y_{\text{pred}} - y_{\text{true}})
  $$
* R¬≤ Score:

  $$
  R^2 = 1 - \frac{\sum (y_{\text{true}} - y_{\text{pred}})^2}{\sum (y_{\text{true}} - \bar{y})^2}
  $$

---

### üìà **Plot**

* Comparison:

  * Blue: Polar H10
  * Green Dashed: Estimated from respiration
* Saved as: `Heart_Rate_Comparison.png`

---

### üìä **Excel Output**

* Sheets:

  * `Comparison`: Polar HR vs Estimated HR
  * `Metrics`: RMSE, MAE, Bias, R¬≤
* File: `Comparison_Output.xlsx`

---

### ‚úÖ **Linear Regression Insight**

* Linear model:

  Heart rate = `slope` * Minute Ventilation + `intercept`
* **Manual regression model** with slope = `5.6`, intercept = `0`
* Assumes **linear relationship** between breathing rate and heart rate
"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import os

# FILE PATHS
resp_file = '/content/content/subject4_recovery_resp.csv'  # Respiratory device data
polar_file = '/content/content/Subject4_recovery_polar.CSV'  # Polar H10 ECG data
output_dir = 'OUTPUT/recovery/subject5'  # Output folder
os.makedirs(output_dir, exist_ok=True)

# LOADING THE DATA
# Respiratory device data
resp_df = pd.read_csv(resp_file)

# Cleaning column names (we will remove spaces, unify)
resp_df.columns = [col.strip() for col in resp_df.columns]

# 'Duration' is float
resp_df['Time'] = resp_df['Duration'].astype(float)

# Polar data
polar_df = pd.read_csv(polar_file , skiprows=2)

# 'Time' is float (seconds)
polar_df['Time'] = pd.to_timedelta(polar_df['Time']).dt.total_seconds()

#ESTIMATE HR FROM RESPIRATORY DEVICE
# Average of two nostrils' breathing rates
resp_df['Breathing_Rate_Avg'] = resp_df[['Breathing Rate 1', 'Breathing Rate 2']].mean(axis=1)

#FACTOR PLACEHOLDER
factor = 5.67


resp_df['Estimated_HR'] = resp_df['Breathing_Rate_Avg'] * factor

# ALIGNING TIME FRAMES ===
common_start = max(resp_df['Time'].min(), polar_df['Time'].min())
common_end = min(resp_df['Time'].max(), polar_df['Time'].max())
common_time = np.linspace(common_start, common_end, num=500)  # you can increase num for smoother curves

# Interpolate HR values
resp_hr_interp = np.interp(common_time, resp_df['Time'], resp_df['Estimated_HR'])
polar_hr_interp = np.interp(common_time, polar_df['Time'], polar_df['HR (bpm)'])

# PERFORMANCE METRICS
rmse = np.sqrt(mean_squared_error(polar_hr_interp, resp_hr_interp)) # Remove squared=False and calculate RMSE using np.sqrt
mae = mean_absolute_error(polar_hr_interp, resp_hr_interp)
bias = np.mean(resp_hr_interp - polar_hr_interp)
r2 = r2_score(polar_hr_interp, resp_hr_interp)

# SAVE METRICS & COMPARISON DATA
metrics_df = pd.DataFrame({
    'Metric': ['RMSE', 'MAE', 'Bias', 'R¬≤'],
    'Value': [rmse, mae, bias, r2]
})

comparison_df = pd.DataFrame({
    'Time (s)': common_time,
    'Polar_HR (bpm)': polar_hr_interp,
    'Resp_Estimated_HR (bpm)': resp_hr_interp
})

with pd.ExcelWriter(os.path.join(output_dir, 'Comparison_Output.xlsx')) as writer:
    comparison_df.to_excel(writer, index=False, sheet_name='Comparison')
    metrics_df.to_excel(writer, index=False, sheet_name='Metrics')

print(f"‚úÖ Excel saved to {os.path.join(output_dir, 'Comparison_Output.xlsx')}")

# PLOT
plt.figure(figsize=(14, 6))
plt.plot(common_time, polar_hr_interp, label='Polar H10 HR (bpm)', color='blue', linewidth=2)
plt.plot(common_time, resp_hr_interp, label='Respiratory Device Estimated HR (bpm)', color='green', linestyle='--', linewidth=2)
plt.title('Heart Rate Comparison')
plt.xlabel('Time (seconds)')
plt.ylabel('Heart Rate (bpm)')
plt.legend()
plt.grid(True, linestyle='--', alpha=0.7)
plt.tight_layout()
plt.savefig(os.path.join(output_dir, 'Heart_Rate_Comparison.png'), dpi=300)
plt.show()

print("‚úÖ Plot saved.")
print("‚úÖ All tasks completed successfully!")

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import os

# === CONFIGURATION ===
base_dir = '/content'  # Base directory containing subject folders
output_base = os.path.join(base_dir, 'OUTPUT 1')
factor = 4.565  # HR estimation factor from breathing rate
os.makedirs(output_base, exist_ok=True)

# === GET ALL SUBJECT FOLDERS ===
subject_folders = [f for f in os.listdir(base_dir) if os.path.isdir(os.path.join(base_dir, f)) and f.lower().startswith('subject')]

for subject in subject_folders:
    try:
        print(f"üîÑ Processing {subject}...")

        subject_dir = os.path.join(base_dir, subject)
        output_dir = os.path.join(output_base, subject)
        os.makedirs(output_dir, exist_ok=True)

        # FILES
        resp_file = [f for f in os.listdir(subject_dir) if 'resp' in f.lower() and f.endswith('.csv')][0]
        polar_file = [f for f in os.listdir(subject_dir) if 'polar' not in f.lower() and f.endswith('.csv')][0]

        # === LOAD RESPIRATORY DATA ===
        resp_df = pd.read_csv(os.path.join(subject_dir, resp_file))
        resp_df.columns = [col.strip() for col in resp_df.columns]
        resp_df['Time'] = resp_df['Duration(s)'].astype(float)
        resp_df['Breathing_Rate_Avg'] = resp_df[['Breathing Rate 1', 'Breathing Rate 2']].mean(axis=1)
        resp_df['Estimated_HR'] = resp_df['Breathing_Rate_Avg'] * factor

        # === LOAD POLAR DATA ===
        polar_df = pd.read_csv(os.path.join(subject_dir, polar_file), skiprows=2)
        polar_df['Time'] = pd.to_timedelta(polar_df['Time']).dt.total_seconds()

        # === ALIGN TIME ===
        common_start = max(resp_df['Time'].min(), polar_df['Time'].min())
        common_end = min(resp_df['Time'].max(), polar_df['Time'].max())
        common_time = np.linspace(common_start, common_end, num=500)


        # Interpolate
        resp_hr_interp = np.interp(common_time, resp_df['Time'], resp_df['Estimated_HR'])
        polar_hr_interp = np.interp(common_time, polar_df['Time'], polar_df['HR (bpm)'])

        # === METRICS ===
        rmse = np.sqrt(mean_squared_error(polar_hr_interp, resp_hr_interp))
        mae = mean_absolute_error(polar_hr_interp, resp_hr_interp)
        bias = np.mean(resp_hr_interp - polar_hr_interp)
        r2 = r2_score(polar_hr_interp, resp_hr_interp)

        metrics_df = pd.DataFrame({
            'Metric': ['RMSE', 'MAE', 'Bias', 'R¬≤'],
            'Value': [rmse, mae, bias, r2]
        })

        comparison_df = pd.DataFrame({
            'Time (s)': common_time,
            'Polar_HR (bpm)': polar_hr_interp,
            'Resp_Estimated_HR (bpm)': resp_hr_interp
        })

        # === SAVE OUTPUT ===
        excel_path = os.path.join(output_dir, 'Comparison_Output.xlsx')
        with pd.ExcelWriter(excel_path) as writer:
            comparison_df.to_excel(writer, index=False, sheet_name='Comparison')
            metrics_df.to_excel(writer, index=False, sheet_name='Metrics')

        # === PLOT ===
        plt.figure(figsize=(14, 6))
        plt.plot(common_time, polar_hr_interp, label='Polar H10 HR (bpm)', color='blue', linewidth=2)
        plt.plot(common_time, resp_hr_interp, label='Resp Device Estimated HR (bpm)', color='green', linestyle='--', linewidth=2)
        plt.title(f'Heart Rate Comparison - {subject}')
        plt.xlabel('Time (seconds)')
        plt.ylabel('Heart Rate (bpm)')
        plt.legend()
        plt.grid(True, linestyle='--', alpha=0.7)
        plt.tight_layout()
        plot_path = os.path.join(output_dir, 'Heart_Rate_Comparison.png')
        plt.savefig(plot_path, dpi=300)
        plt.close()

        print(f"‚úÖ Finished {subject}: Excel and Plot saved.")

    except Exception as e:
        print(f"‚ùå Error processing {subject}: {e}")

print("üèÅ All subjects processed.")

# HEART RATE vs MINUTE VENTILATION PLOT

# Calculate average Minute Ventilation
resp_df['Minute_Ventilation_Avg'] = resp_df[['Minute Ventilation 1', 'Minute Ventilation 2']].mean(axis=1)

# Interpolate minute ventilation to the common time base
minute_vent_interp = np.interp(common_time, resp_df['Time'], resp_df['Minute_Ventilation_Avg'])

# Plot HR vs Minute Ventilation (from interpolated respiratory HR and minute ventilation)
plt.figure(figsize=(8, 6))
plt.scatter(minute_vent_interp, resp_hr_interp, alpha=0.7, color='green')
plt.title('Heart Rate vs Minute Ventilation')
plt.xlabel('Minute Ventilation (L/min)')
plt.ylabel('Estimated Heart Rate (bpm)')
plt.grid(True, linestyle='--', alpha=0.7)
plt.tight_layout()
plt.savefig(os.path.join(output_dir, 'HR_vs_Minute_Ventilation.png'), dpi=300)
plt.show()

print("‚úÖ Heart Rate vs Minute Ventilation plot saved.")

plt.figure(figsize=(8, 6))
plt.scatter(resp_hr_interp, polar_hr_interp, alpha=0.5, label='Data')
plt.plot(resp_hr_interp, model.predict(X), color='red', label=f'Fit: y = {m:.2f}x + {C:.2f}')
plt.xlabel('Estimated HR (bpm)')
plt.ylabel('True HR (bpm)')
plt.title('Linear Fit: Estimated vs True HR')
plt.legend()
plt.grid(True, linestyle='--', alpha=0.7)
plt.tight_layout()
plt.savefig(os.path.join(output_dir, 'Linear_Regression_Fit.png'), dpi=300)
plt.show()

"""
Here‚Äôs a compact breakdown in **keyword + equation** style:

---

### üì• **File I/O**

* Inputs:

  * `subject4_recovery_resp.csv` ‚Üí **Respiratory data**
  * `Subject4_recovery_polar.CSV` ‚Üí **Polar H10 ECG data**
* Output:

  * Folder: `OUTPUT/recovery/subject5/`
  * Excel + plot file

---

### üîß **Data Preprocessing**

* ‚è± `Time` columns ‚Üí converted to **float** or **seconds**
* Clean headers: `.strip()` to remove whitespace

---

### üí° **Heart Rate Estimation**

* Averaged Breathing Rate:

  $$
  \text{BR}_{\text{avg}} = \frac{\text{BR}_1 + \text{BR}_2}{2}
  $$
* **Form Factor:**

  $$
  \text{Estimated HR} = \text{BR}_{\text{avg}} \times 5.6
  $$

  * `form factor = 5.6`, `bias factor = 0`

---

### ‚è≥ **Time Alignment**

* `common_time`:

  $$
  \text{linspace}(\max(t_{\text{resp start}}, t_{\text{polar start}}),\; \min(t_{\text{resp end}}, t_{\text{polar end}}),\; 500)
  $$
* `np.interp(...)` for both signals

---

### üìä **Performance Metrics**

* Root Mean Square Error (RMSE):

  $$
  \text{RMSE} = \sqrt{\frac{1}{n} \sum (y_{\text{true}} - y_{\text{pred}})^2}
  $$
* Mean Absolute Error (MAE):

  $$
  \text{MAE} = \frac{1}{n} \sum |y_{\text{true}} - y_{\text{pred}}|
  $$
* Bias:

  $$
  \text{Bias} = \text{mean}(y_{\text{pred}} - y_{\text{true}})
  $$
* R¬≤ Score:

  $$
  R^2 = 1 - \frac{\sum (y_{\text{true}} - y_{\text{pred}})^2}{\sum (y_{\text{true}} - \bar{y})^2}
  $$

---

### üìà **Plot**

* Comparison:

  * Blue: Polar H10
  * Green Dashed: Estimated from respiration
* Saved as: `Heart_Rate_Comparison.png`

---

### üìä **Excel Output**

* Sheets:

  * `Comparison`: Polar HR vs Estimated HR
  * `Metrics`: RMSE, MAE, Bias, R¬≤
* File: `Comparison_Output.xlsx`

---

### ‚úÖ **Linear Regression Insight**

* Linear model:

  Heart rate = `slope` * Minute Ventilation + `intercept`
* **Manual regression model** with slope = `5.6`, intercept = `0`
* Assumes **linear relationship** between breathing rate and heart rate
"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import os

# FILE PATHS
resp_file = '/content/content/subject4_recovery_resp.csv'  # Respiratory device data
polar_file = '/content/content/Subject4_recovery_polar.CSV'  # Polar H10 ECG data
output_dir = 'OUTPUT/recovery/subject5'  # Output folder
os.makedirs(output_dir, exist_ok=True)

# LOADING THE DATA
# Respiratory device data
resp_df = pd.read_csv(resp_file)

# Cleaning column names (we will remove spaces, unify)
resp_df.columns = [col.strip() for col in resp_df.columns]

# 'Duration' is float
resp_df['Time'] = resp_df['Duration'].astype(float)

# Polar data
polar_df = pd.read_csv(polar_file , skiprows=2)

# 'Time' is float (seconds)
polar_df['Time'] = pd.to_timedelta(polar_df['Time']).dt.total_seconds()

#ESTIMATE HR FROM RESPIRATORY DEVICE
# Average of two nostrils' breathing rates
resp_df['Breathing_Rate_Avg'] = resp_df[['Breathing Rate 1', 'Breathing Rate 2']].mean(axis=1)

#FACTOR PLACEHOLDER
factor = 5


resp_df['Estimated_HR'] = resp_df['Breathing_Rate_Avg'] * factor

# ALIGNING TIME FRAMES ===
common_start = max(resp_df['Time'].min(), polar_df['Time'].min())
common_end = min(resp_df['Time'].max(), polar_df['Time'].max())
common_time = np.linspace(common_start, common_end, num=500)  # you can increase num for smoother curves

# Interpolate HR values
resp_hr_interp = np.interp(common_time, resp_df['Time'], resp_df['Estimated_HR'])
polar_hr_interp = np.interp(common_time, polar_df['Time'], polar_df['HR (bpm)'])

# PERFORMANCE METRICS
rmse = np.sqrt(mean_squared_error(polar_hr_interp, resp_hr_interp)) # Remove squared=False and calculate RMSE using np.sqrt
mae = mean_absolute_error(polar_hr_interp, resp_hr_interp)
bias = np.mean(resp_hr_interp - polar_hr_interp)
r2 = r2_score(polar_hr_interp, resp_hr_interp)

# SAVE METRICS & COMPARISON DATA
metrics_df = pd.DataFrame({
    'Metric': ['RMSE', 'MAE', 'Bias', 'R¬≤'],
    'Value': [rmse, mae, bias, r2]
})

comparison_df = pd.DataFrame({
    'Time (s)': common_time,
    'Polar_HR (bpm)': polar_hr_interp,
    'Resp_Estimated_HR (bpm)': resp_hr_interp
})

with pd.ExcelWriter(os.path.join(output_dir, 'Comparison_Output.xlsx')) as writer:
    comparison_df.to_excel(writer, index=False, sheet_name='Comparison')
    metrics_df.to_excel(writer, index=False, sheet_name='Metrics')

print(f"‚úÖ Excel saved to {os.path.join(output_dir, 'Comparison_Output.xlsx')}")

# PLOT
plt.figure(figsize=(14, 6))
plt.plot(common_time, polar_hr_interp, label='Polar H10 HR (bpm)', color='blue', linewidth=2)
plt.plot(common_time, resp_hr_interp, label='Respiratory Device Estimated HR (bpm)', color='green', linestyle='--', linewidth=2)
plt.title('Heart Rate Comparison')
plt.xlabel('Time (seconds)')
plt.ylabel('Heart Rate (bpm)')
plt.legend()
plt.grid(True, linestyle='--', alpha=0.7)
plt.tight_layout()
plt.savefig(os.path.join(output_dir, 'Heart_Rate_Comparison.png'), dpi=300)
plt.show()

from sklearn.linear_model import LinearRegression

# Reshape data for sklearn (expects 2D array for X)
X = resp_hr_interp.reshape(-1, 1)  # Estimated HR (input)
y = polar_hr_interp               # True HR (target)

# Fit the regression model
model = LinearRegression().fit(X, y)

# Extract slope and intercept
m = model.coef_[0]
C = model.intercept_

print(f"Slope (m): {m}")
print(f"Intercept (C): {C}")

plt.figure(figsize=(8, 6))
plt.scatter(resp_hr_interp, polar_hr_interp, alpha=0.5, label='Data')
plt.plot(resp_hr_interp, model.predict(X), color='red', label=f'Fit: y = {m:.2f}x + {C:.2f}')
plt.xlabel('Estimated HR (bpm)')
plt.ylabel('True HR (bpm)')
plt.title('Linear Fit: Estimated vs True HR')
plt.legend()
plt.grid(True, linestyle='--', alpha=0.7)
plt.tight_layout()
plt.savefig(os.path.join(output_dir, 'Linear_Regression_Fit.png'), dpi=300)
plt.show()

print("‚úÖ Plot saved.")
print("‚úÖ All tasks completed successfully!")