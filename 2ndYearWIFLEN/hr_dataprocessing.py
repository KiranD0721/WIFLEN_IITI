# -*- coding: utf-8 -*-
"""HR_dataprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15eozLtw0x5Lxw-LcmyOYbT6mhdbInse3
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
from glob import glob

# Directory containing your CSVs
input_folder = r"CSVs"
output_root = r"OUTPUT_PLOTS"  # where to store the folders

# Create output directory if it doesn't exist
os.makedirs(output_root, exist_ok=True)

def format_seconds_as_hms(seconds):
    return str(pd.to_timedelta(seconds, unit='s')).split()[-1]

def process_csv(file_path):
    # Extract base filename (no extension)
    base_name = os.path.splitext(os.path.basename(file_path))[0]
    output_dir = os.path.join(output_root, base_name)
    os.makedirs(output_dir, exist_ok=True)

    # Load and process CSV
    df = pd.read_csv(file_path, skiprows=2)
    df["Time"] = pd.to_timedelta(df["Time"])
    df["Time_sec"] = df["Time"].dt.total_seconds()
    df["RR_interval"] = 60 / df["HR (bpm)"]

    rr_intervals = np.diff(df["Time_sec"])
    df_rr = df.iloc[1:].copy()
    df_rr["RR_interval_sec"] = rr_intervals
    # Plot 1: HR
    plt.figure(figsize=(20, 6))
    plt.plot(df["Time_sec"], df["HR (bpm)"], marker='o', linestyle='-', color='royalblue')
    plt.title("Heart Rate (bpm) vs Time", fontsize=16)
    plt.xlabel("Time (HH:MM:SS)", fontsize=14)
    plt.ylabel("HR (bpm)", fontsize=14)
    plt.grid(True, linestyle='--', alpha=0.5)
    xticks = df["Time_sec"][::max(1, len(df)//20)]
    plt.xticks(xticks, [format_seconds_as_hms(x) for x in xticks], rotation=45)
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, f"{base_name}_HR.png"))
    plt.close()
    # Plot 2: RR
    plt.figure(figsize=(20, 6))
    plt.plot(df_rr["Time_sec"], df_rr["RR_interval_sec"], marker='x', linestyle='-', color='darkgreen')
    plt.title("RR Interval (sec) vs Time", fontsize=16)
    plt.xlabel("Time (HH:MM:SS)", fontsize=14)
    plt.ylabel("RR Interval (seconds)", fontsize=14)
    plt.grid(True, linestyle='--', alpha=0.5)
    xticks = df_rr["Time_sec"][::max(1, len(df_rr)//20)]
    plt.xticks(xticks, [format_seconds_as_hms(x) for x in xticks], rotation=45)
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, f"{base_name}_RR.png"))
    plt.close()
    # Plot 3: Combined
    plt.figure(figsize=(20, 6))
    plt.plot(df["Time_sec"], df["HR (bpm)"], label='HR (bpm)', color='royalblue', linewidth=2)
    plt.plot(df_rr["Time_sec"], df_rr["RR_interval_sec"], label='RR Interval (s)', color='darkgreen', linestyle='--', linewidth=2)
    plt.title("Heart Rate & RR Interval vs Time", fontsize=16)
    plt.xlabel("Time (HH:MM:SS)", fontsize=14)
    plt.ylabel("Value", fontsize=14)
    plt.legend()
    plt.grid(True, linestyle='--', alpha=0.5)
    xticks = df["Time_sec"][::max(1, len(df)//20)]
    plt.xticks(xticks, [format_seconds_as_hms(x) for x in xticks], rotation=45)
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, f"{base_name}_HR&RR.png"))
    plt.close()

# Loop through all .CSV files
csv_files = glob(os.path.join(input_folder, "*.CSV"))
for csv_file in csv_files:
    print(f"Processing: {csv_file}")
    process_csv(csv_file)

print("✅ All plots saved.")

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
from glob import glob

# Directory containing your CSVs
input_folder = r"CSVs"
output_root = r"OUTPUT_PLOTS_2"

# Create output directory if it doesn't exist
os.makedirs(output_root, exist_ok=True)

def format_seconds_as_hms(seconds):
    return str(pd.to_timedelta(seconds, unit='s')).split()[-1]

def process_csv(file_path):
    base_name = os.path.splitext(os.path.basename(file_path))[0]
    output_dir = os.path.join(output_root, base_name)
    os.makedirs(output_dir, exist_ok=True)

    df = pd.read_csv(file_path, skiprows=2)
    df["Time"] = pd.to_timedelta(df["Time"])
    df["Time_sec"] = df["Time"].dt.total_seconds()

    # ✅ Correct RR interval calculation from BPM
    df["RR_interval_sec"] = 60 / df["HR (bpm)"]

    # Plot 1: HR
    plt.figure(figsize=(20, 6))
    plt.plot(df["Time_sec"], df["HR (bpm)"], marker='o', linestyle='-', color='royalblue')
    plt.title("Heart Rate (bpm) vs Time", fontsize=16)
    plt.xlabel("Time (HH:MM:SS)", fontsize=14)
    plt.ylabel("HR (bpm)", fontsize=14)
    plt.grid(True, linestyle='--', alpha=0.5)
    xticks = df["Time_sec"][::max(1, len(df)//20)]
    plt.xticks(xticks, [format_seconds_as_hms(x) for x in xticks], rotation=45)
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, f"{base_name}_HR.png"))
    plt.show()
    plt.close()

    # Plot 2: RR
    plt.figure(figsize=(20, 6))
    plt.plot(df["Time_sec"], df["RR_interval_sec"], marker='x', linestyle='-', color='darkgreen')
    plt.title("RR Interval (sec) vs Time", fontsize=16)
    plt.xlabel("Time (HH:MM:SS)", fontsize=14)
    plt.ylabel("RR Interval (seconds)", fontsize=14)
    plt.grid(True, linestyle='--', alpha=0.5)
    xticks = df["Time_sec"][::max(1, len(df)//20)]
    plt.xticks(xticks, [format_seconds_as_hms(x) for x in xticks], rotation=45)
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, f"{base_name}_RR.png"))
    plt.show()
    plt.close()

    # Plot 3: Combined
    plt.figure(figsize=(20, 10))
    plt.plot(df["Time_sec"], df["HR (bpm)"], label='HR (bpm)', color='royalblue', linewidth=2)
    plt.plot(df["Time_sec"], df["RR_interval_sec"], label='RR Interval (s)', color='darkgreen', linestyle='--', linewidth=2)
    plt.title("Heart Rate & RR Interval vs Time", fontsize=16)
    plt.xlabel("Time (HH:MM:SS)", fontsize=14)
    plt.ylabel("Value", fontsize=14)
    plt.legend()
    plt.grid(True, linestyle='--', alpha=0.5)
    xticks = df["Time_sec"][::max(1, len(df)//20)]
    plt.xticks(xticks, [format_seconds_as_hms(x) for x in xticks], rotation=45)
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, f"{base_name}_HR&RR.png"))
    plt.show()
    plt.close()

# Loop through all .CSV files
csv_files = glob(os.path.join(input_folder, "*.CSV"))
for csv_file in csv_files:
    print(f"Processing: {csv_file}")
    process_csv(csv_file)

print("✅ All plots saved.")

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
from glob import glob

# Directory containing your CSVs
input_folder = r"CSVs"
output_root = r"OUTPUT_PLOTS_2"

# Create output directory if it doesn't exist
os.makedirs(output_root, exist_ok=True)

def format_seconds_as_hms(seconds):
    return str(pd.to_timedelta(seconds, unit='s')).split()[-1]

def process_csv(file_path):
    base_name = os.path.splitext(os.path.basename(file_path))[0]
    output_dir = os.path.join(output_root, base_name)
    os.makedirs(output_dir, exist_ok=True)

    df = pd.read_csv(file_path, skiprows=2)
    df["Time"] = pd.to_timedelta(df["Time"])
    df["Time_sec"] = df["Time"].dt.total_seconds()

    # ✅ RR interval (still calculated in case needed for other analyses)
    df["RR_interval_sec"] = 60 / df["HR (bpm)"]

    # Plot only: HR vs Time
    plt.figure(figsize=(20, 6))
    plt.plot(df["Time_sec"], df["HR (bpm)"], marker='o', linestyle='-', color='royalblue')
    plt.title("Heart Rate (bpm) vs Time", fontsize=16)
    plt.xlabel("Time (HH:MM:SS)", fontsize=14)
    plt.ylabel("HR (bpm)", fontsize=14)
    plt.grid(True, linestyle='--', alpha=0.5)
    xticks = df["Time_sec"][::max(1, len(df)//20)]
    plt.xticks(xticks, [format_seconds_as_hms(x) for x in xticks], rotation=45)
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, f"{base_name}_HR.png"))
    plt.show()
    plt.close()

# Loop through all .CSV files
csv_files = glob(os.path.join(input_folder, "*.CSV"))
for csv_file in csv_files:
    print(f"Processing: {csv_file}")
    process_csv(csv_file)

print("✅ All plots saved.")



"""
-Batch CSV Processing
Libraries used: `pandas`, `numpy`, `matplotlib.pyplot`, `os`, `glob`
Input: `CSVs/*.CSV` (skips 2 header rows)
Time Conversion:
  `df["Time_sec"] = pd.to_timedelta(df["Time"]).dt.total_seconds()`
RR Interval Calculation**:
  `RR = 60 / HR`
Plot 1**: Heart Rate vs Time

  * Y-axis: `HR (bpm)`
  * X-axis: `Time_sec → HH:MM:SS`
  * Output: `<base_name>_HR.png`
Plot 2**: RR Interval vs Time

  * Y-axis: `RR_interval_sec (s)`
  * X-axis: `Time_sec → HH:MM:SS`
  * Output: `<base_name>_RR.png`
Output Directory**:
  `OUTPUT_PLOTS_3/<filename>/`
One folder per file, two plots per folder**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
from glob import glob

# Directory containing your CSVs
input_folder = r"CSVs"
output_root = r"OUTPUT_PLOTS_3"

# Create output directory if it doesn't exist
os.makedirs(output_root, exist_ok=True)

def format_seconds_as_hms(seconds):
    return str(pd.to_timedelta(seconds, unit='s')).split()[-1]

def process_csv(file_path):
    base_name = os.path.splitext(os.path.basename(file_path))[0]
    output_dir = os.path.join(output_root, base_name)
    os.makedirs(output_dir, exist_ok=True)

    df = pd.read_csv(file_path, skiprows=2)
    df["Time"] = pd.to_timedelta(df["Time"])
    df["Time_sec"] = df["Time"].dt.total_seconds()

    # ✅ Correct RR interval calculation from BPM
    df["RR_interval_sec"] = 60 / df["HR (bpm)"]

    # Plot 1: HR
    plt.figure(figsize=(20, 6))
    plt.plot(df["Time_sec"], df["HR (bpm)"], marker='o', linestyle='-', color='royalblue')
    plt.title("Heart Rate (bpm) vs Time", fontsize=16)
    plt.xlabel("Time (HH:MM:SS)", fontsize=14)
    plt.ylabel("HR (bpm)", fontsize=14)
    plt.grid(True, linestyle='--', alpha=0.5)
    xticks = df["Time_sec"][::max(1, len(df)//20)]
    plt.xticks(xticks, [format_seconds_as_hms(x) for x in xticks], rotation=45)
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, f"{base_name}_HR.png"))
    plt.show()
    plt.close()

    # Plot 2: RR
    plt.figure(figsize=(20, 6))
    plt.plot(df["Time_sec"], df["RR_interval_sec"], marker='x', linestyle='-', color='darkgreen')
    plt.title("RR Interval (sec) vs Time", fontsize=16)
    plt.xlabel("Time (HH:MM:SS)", fontsize=14)
    plt.ylabel("RR Interval (seconds)", fontsize=14)
    plt.grid(True, linestyle='--', alpha=0.5)
    xticks = df["Time_sec"][::max(1, len(df)//20)]
    plt.xticks(xticks, [format_seconds_as_hms(x) for x in xticks], rotation=45)
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, f"{base_name}_RR.png"))
    plt.show()
    plt.close()

# Loop through all .CSV files
csv_files = glob(os.path.join(input_folder, "*.CSV"))
for csv_file in csv_files:
    print(f"Processing: {csv_file}")
    process_csv(csv_file)

print("✅ All plots saved.")